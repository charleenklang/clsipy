#!/usr/bin/python
import os, sys

# missing module fix
sys.path.append(os.path.join(os.environ['OPENSHIFT_REPO_DIR'], 'wsgi'))
virtenv = os.environ['APPDIR']+'/virtenv'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
        execfile(virtualenv, dict(__file__=virtualenv))
except:
        pass

from web import wsgiserver
import web
import utilities

HOME = os.environ['CLSI_HOME']
APP = os.environ['CLSI_APP']

urls = (
    '/', 'index',
    '/compile', 'compile',
    '/download/(.+)', 'download',
    '/install', 'install'
)

render = web.template.render(APP+'templates/')

class index:
    def GET(self):
        try:
            f = open(APP+'static/index.html', 'r')
            web.header('Content-Type', 'text/html')
            return f.read()
        except:
            return APP+'static/index.html not found' 
class compile:
    def GET(self):
        return 'clsi compiler'
    def POST(self):
        clsi = utilities.clsi()

        try:
            to_compile = clsi.parse(web.data())
            [log, out] = clsi.run(to_compile)
        except SystemExit:
            return render.no_output('Invalid token')
        except Exception:
            return render.no_output('Internal Server Error')
        if out is None:
            log = HOME+"download/"+log
            return render.failure(log)
        else:
            out = HOME+'download/'+out
            log = HOME+'download/'+log
            return render.success(out, log)

class download:
    def GET(self, file):
        try:
            f = open(APP+'static/download/'+file, 'r')
            return f.read()
        except:
            return APP+'static/download/'+file+' not found'
            
app = web.application(urls, globals()) # web.py call
application = app.wsgifunc() # Runs the app with wsgi

if __name__ == '__main__':
    app.run()
